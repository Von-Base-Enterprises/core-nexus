name: Python CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'python/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'poetry.toml'
      - '.python-version'
      - 'ruff.toml'
      - 'mypy.ini'
      - 'pytest.ini'
      - 'tox.ini'
      - 'Makefile'
      - '.github/workflows/py-ci.yml'
      - '.github/workflows/reusable-test.yml'
  
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'python/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'poetry.toml'
      - '.python-version'
      - 'ruff.toml'
      - 'mypy.ini'
      - 'pytest.ini'
      - 'tox.ini'
      - 'Makefile'
      - '.github/workflows/py-ci.yml'
      - '.github/workflows/reusable-test.yml'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      python-versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.9, 3.10, 3.11, 3.12'
      skip-cache:
        description: 'Skip cache for debugging'
        required: false
        type: boolean
        default: false
      include-prerelease:
        description: 'Include Python pre-release versions'
        required: false
        type: boolean
        default: false

# Cancel in-progress runs for same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Force colors in CI
  FORCE_COLOR: 1
  CI: true
  # Poetry configuration
  POETRY_VENV_IN_PROJECT: 1

jobs:
  # Job to detect changes and set up matrix
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      python-versions: ${{ steps.matrix.outputs.python-versions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Enable Corepack
        run: corepack enable
        
      - name: Set Yarn Version
        run: corepack prepare yarn@4.0.2 --activate
        
      - name: Verify Yarn Version
        run: yarn --version
        
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Python changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python:
              - 'python/**'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'poetry.toml'
              - '.python-version'
              - 'ruff.toml'
              - 'mypy.ini'
              - 'pytest.ini'
              - 'tox.ini'

      - name: Set matrix versions
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Use manual input for workflow_dispatch
            VERSIONS="${{ github.event.inputs.python-versions || '3.9, 3.10, 3.11, 3.12' }}"
            
            # Add pre-release versions if requested
            if [ "${{ github.event.inputs.include-prerelease }}" = "true" ]; then
              VERSIONS="$VERSIONS, 3.13-dev"
            fi
          else
            # Use default versions for other triggers
            VERSIONS="3.9, 3.10, 3.11, 3.12"
          fi
          
          # Convert comma-separated string to JSON array, handling quotes properly
          JSON_VERSIONS=$(echo "[$VERSIONS]" | jq -c 'map(. as $item | if ($item | type) == "string" then $item else ($item | tostring) end)')
          echo "python-versions=$JSON_VERSIONS" >> $GITHUB_OUTPUT
          echo "Python versions to test: $JSON_VERSIONS"

  # Main test job using matrix strategy
  test:
    name: Test Python
    needs: changes
    if: needs.changes.outputs.python == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.changes.outputs.python-versions) }}
        # Use stable Node.js version for Python testing
        node-version: ['18']
        include:
          # Add specific configurations for different Python versions
          - python-version: '3.9'
            experimental: false
            allow-prereleases: false
          - python-version: '3.10'
            experimental: false
            allow-prereleases: false
          - python-version: '3.11'
            experimental: false
            allow-prereleases: false
          - python-version: '3.12'
            experimental: false
            allow-prereleases: false
          # Pre-release versions (if included)
          - python-version: '3.13-dev'
            experimental: true
            allow-prereleases: true
            continue-on-error: true
    
    uses: ./.github/workflows/reusable-test.yml
    with:
      node-version: ${{ matrix.node-version }}
      python-version: ${{ matrix.python-version }}
      skip-cache: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip-cache == 'true' }}

  # Job to collect and report test results
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## Python CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.changes.outputs.python }}" != "true" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "🔄 **Skipped**: No relevant Python changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changed paths filter:" >> $GITHUB_STEP_SUMMARY
            echo "- python/**" >> $GITHUB_STEP_SUMMARY
            echo "- Configuration files (pyproject.toml, poetry.lock, etc.)" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ **Success**: All Python tests passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Tested Python versions: ${{ needs.changes.outputs.python-versions }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test.result }}" = "failure" ]; then
            echo "❌ **Failed**: One or more Python tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ "${{ needs.test.result }}" = "cancelled" ]; then
            echo "⏹️ **Cancelled**: Tests were cancelled" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "⚠️ **Unknown**: Unexpected test result: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Python-specific security and quality checks
  security-and-quality:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python (latest stable)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Run security audit with Safety
        continue-on-error: true
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Install safety if not already installed
          poetry add --group dev safety || true
          
          # Run safety check
          if poetry run safety check --json > safety.json 2>/dev/null; then
            echo "✅ No known security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            poetry run safety check --short-report 2>&1 || true >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`poetry run safety check\` locally for detailed information." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check dependency freshness
        continue-on-error: true
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Dependency Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for outdated packages
          if poetry show --outdated > outdated.txt 2>/dev/null && [ -s outdated.txt ]; then
            echo "📦 **Outdated packages found:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            head -20 outdated.txt >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`poetry show --outdated\` locally to see all outdated packages." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All dependencies are up to date" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Code complexity analysis
        continue-on-error: true
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Install radon for complexity analysis
          poetry add --group dev radon || true
          
          # Run complexity analysis on python directory if it exists
          if [ -d "python" ]; then
            echo "**Cyclomatic Complexity (CC > 10):**" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            poetry run radon cc python --min B --show-complexity || echo "No complex functions found" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "**Maintainability Index:**" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            poetry run radon mi python || echo "Unable to calculate maintainability index" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          else
            echo "No python directory found for analysis" >> $GITHUB_STEP_SUMMARY
          fi

  # Type checking validation across versions
  type-checking:
    name: Extended Type Checking
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    strategy:
      matrix:
        python-version: ['3.10', '3.12']  # Test type checking on min and max versions
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Run MyPy type checking
        run: |
          echo "Running MyPy on Python ${{ matrix.python-version }}"
          poetry run mypy . --python-version=${{ matrix.python-version }} || true
